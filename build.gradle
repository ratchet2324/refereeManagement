apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'groovy'

mainClassName = "nefra.jfx.Main"

versionNumbers.load()

def versionMajor = versionNumbers.getMajor(false)
def versionMinor = versionNumbers.getMinor(false)
def versionMicro = versionNumbers.getMicro(false)
def versionBuild = versionNumbers.getBuild()
def versionString = "${versionMajor}.${versionMinor}.${versionMicro}_${versionBuild}"
def projectName = "Referee Management"

dependencies {
    compile project (":container")
    compile project (":jfx")
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    version = "${versionString}"
    ext {
    }
}

subprojects {
    apply plugin: "jacoco"

    dependencies {
        compile 'org.apache.commons:commons-lang3:+'
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile "org.mockito:mockito-core:2.+"
        compile 'org.jetbrains:annotations:+'
    }

    clean.doLast {
        file('/out').deleteDir()
    }

    jar {
        manifest.attributes provider: 'gradle'
    }

    build {
        doFirst { clean }
        file('./NEFRA Data').deleteDir()
    }
}

jar {
    manifest {
        attributes(
                'Implementation-Title': 'Referee Management',
                'Implementation-Version': version,
                'Main-Class': 'nefra.jfx.Main',
                'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
        )
        baseName = "${projectName}"
        version = "${versionString}"

    }
}

def mainProjects = [':container', ':jfx']
task oneJar( type: Jar , dependsOn: mainProjects.collect{ it+":compileJava"}) {
    manifest {
        attributes(
                'Implementation-Title': 'Referee Management',
                'Implementation-Version': version,
                'Main-Class': 'nefra.jfx.Main',
                'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
        )
        baseName = "${projectName}"
        version = "${versionString}"
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

build {
    doFirst { clean }
    file('/build/libs/NEFRA Data').deleteDir()
    file('/NEFRA Data').deleteDir()
    file('/src').deleteDir()
    build.finalizedBy(oneJar)
}


class versionNumbers
{
    static Properties props = new Properties()
    static File versionFile = new File("Updater/src/main/resources/version.properties")

    versionNumbers()
    {
        load()
        if(!props.containsKey("versionMajor")) getMajor(true)
        if(!props.containsKey("versionMinor")) getMinor(true)
        if(!props.containsKey("versionMicro")) getMicro(true)
        if(!props.containsKey("versionMajor")) getBuild()
    }

    def static load() { props.load(versionFile.newDataInputStream())}

    def static storeProps() { props.store(versionFile.newWriter(), null) }

    static String getMajor(increment)
    {
        if(increment)
        {
            props.setProperty("versionMajor", (Integer.parseInt(props.getProperty("versionMajor", "-1")) + 1).toString())
            storeProps()
        }
        return props.getProperty("versionMajor")
    }

    static String getMinor(increment)
    {
        if(increment)
        {
            props.setProperty("versionMinor", (Integer.parseInt(props.getProperty("versionMinor", "-1")) + 1).toString())
            storeProps()
        }
        return props.getProperty("versionMinor")
    }

    static String getMicro(increment)
    {
        if(increment)
        {
            props.setProperty("versionMicro", (Integer.parseInt(props.getProperty("versionMicro", "-1")) + 1).toString())
            storeProps()
        }
        return props.getProperty("versionMicro")
    }

    static String getBuild()
    {
        props.setProperty("versionBuild", new Date().format("dd(MM.YY)_HHmmss").toString())
        storeProps()
        return props.getProperty("versionBuild")
    }
}
