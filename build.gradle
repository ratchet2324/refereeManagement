apply plugin: 'application'
apply plugin: 'java'

mainClassName = "nefra.jfx.Main"

def versionMajor = 0
def versionMinor = 0
def versionMicro = 2
def versionBuild = 0

dependencies {
    compile project (":container")
    compile project (":jfx")
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    version = '0.1-SNAPSHOT'
    ext {
    }
}

subprojects {
    apply plugin: "jacoco"

    dependencies {
        compile 'org.apache.commons:commons-lang3:+'
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile "org.mockito:mockito-core:2.+"
        compile 'org.jetbrains:annotations:+'
    }

    clean.doLast {
        file('/out').deleteDir()
    }

    jar {
        manifest.attributes provider: 'gradle'
    }

    build {
        build.doFirst { clean }
        file('./NEFRA Data').deleteDir()
    }
}

jar {
    manifest {
        attributes(
                'Implementation-Title': 'NEFRA Referee Management',
                'Implementation-Version': version,
                'Main-Class': 'nefra.jfx.Main',
                'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
        )
        baseName = "NEFRA"
        version = "${versionMajor}.${versionMinor}.${versionMicro}.${versionBuild}"

    }
}

def mainProjects = [':container', ':jfx']
task oneJar( type: Jar , dependsOn: mainProjects.collect{ it+":compileJava"}) {
    manifest {
        attributes(
                'Implementation-Title': 'NEFRA Referee Management',
                'Implementation-Version': version,
                'Main-Class': 'nefra.jfx.Main',
                'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
        )
        baseName = "NEFRA"
        version = "${versionMajor}.${versionMinor}.${versionMicro}.${versionBuild}"
    }
    //from files(mainProjects.collect{ project(it).sourceSets.main.output })
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

build {
    build.doFirst { clean }
    file('/build/libs/NEFRA Data').deleteDir()
    file('/NEFRA Data').deleteDir()
    file('/src').deleteDir()
    build.finalizedBy(oneJar)
}